import streamlit as st
import os
import tempfile
import requests
import json

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Podcast Interactif IA",
    page_icon="üéôÔ∏è",
    layout="wide"
)

# Configuration du titre et description
st.title("Podcast Interactif avec IA")
st.markdown("""
    √âcoutez un podcast et posez des questions √† n'importe quel moment.
    L'IA r√©pondra avec la voix d'un des animateurs du podcast.
""")

# D√©finition des variables de session
if 'podcast_path' not in st.session_state:
    st.session_state.podcast_path = None
if 'questions_answers' not in st.session_state:
    st.session_state.questions_answers = []
if 'audio_response' not in st.session_state:
    st.session_state.audio_response = None

# Configuration des cl√©s API dans la barre lat√©rale
st.sidebar.header("Configuration de l'API")
elevenlabs_api_key = st.sidebar.text_input("Cl√© API ElevenLabs", type="password")

# Sidebar pour t√©l√©charger le podcast et afficher les informations
st.sidebar.header("Configuration du podcast")

# Zone de t√©l√©chargement du podcast
uploaded_file = st.sidebar.file_uploader("T√©l√©charger un podcast (MP3)", type=['mp3'])

if uploaded_file is not None:
    # Sauvegarde temporaire du fichier
    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        st.session_state.podcast_path = tmp_file.name
    
    st.sidebar.success(f"Podcast t√©l√©charg√©: {uploaded_file.name}")

# Param√®tres de voix ElevenLabs
st.sidebar.header("Configuration de la voix")
voice_options = {
    "Rachel": "21m00Tcm4TlvDq8ikWAM",
    "Antoine": "ErXwobaYiN019PkySvjV",
    "Domi": "AZnzlk1XvdvUeBnXmlld",
    "Bella": "EXAVITQu4vr4xnSDxMaL",
    "Thomas": "GBv7mTt0atIp3Br8iCZE",
    "Nicole": "piTKgcLEGmPE4e6mEKli"
}
voice_name = st.sidebar.selectbox("Voix ElevenLabs", list(voice_options.keys()))
voice_id = voice_options[voice_name]

# R√©ponses pr√©d√©finies pour les questions fr√©quentes sur le conflit Isra√´l-Iran
predefined_responses = {
    "iran": "Le conflit entre l'Iran et Isra√´l est complexe et remonte √† plusieurs d√©cennies. L'Iran ne reconna√Æt pas l'√âtat d'Isra√´l et soutient des groupes comme le Hezbollah et le Hamas qui s'opposent √† Isra√´l. De son c√¥t√©, Isra√´l consid√®re le programme nucl√©aire iranien comme une menace existentielle. Les tensions r√©centes incluent des accusations mutuelles d'attaques et parfois des confrontations militaires directes.",
    
    "attaque": "En avril 2024, l'Iran a lanc√© une attaque directe contre Isra√´l, impliquant environ 300 drones et missiles, dont la plupart ont √©t√© intercept√©s. Cette attaque √©tait une r√©ponse √† une frappe isra√©lienne sur le consulat iranien √† Damas, qui a tu√© plusieurs officiers iraniens. Cet incident repr√©sente une escalade significative dans les tensions entre les deux pays.",
    
    "nucleaire": "Le programme nucl√©aire iranien est au c≈ìur des tensions avec Isra√´l. L'Iran affirme que son programme est pacifique et destin√© √† la production d'√©nergie, tandis qu'Isra√´l et plusieurs pays occidentaux soup√ßonnent l'Iran de chercher √† d√©velopper des armes nucl√©aires. Ces pr√©occupations ont conduit √† des sanctions internationales contre l'Iran et √† des actions clandestines attribu√©es √† Isra√´l pour ralentir le programme nucl√©aire iranien.",
    
    "√©tats-unis": "Les √âtats-Unis jouent un r√¥le important dans ce conflit. Ils sont un alli√© proche d'Isra√´l et maintiennent des sanctions √©conomiques contre l'Iran. L'administration am√©ricaine a condamn√© l'attaque iranienne d'avril 2024 et a aid√© Isra√´l √† intercepter les missiles. Cependant, les √âtats-Unis ont √©galement appel√© √† la retenue pour √©viter une escalade r√©gionale majeure.",
    
    "hezbollah": "Le Hezbollah est un groupe arm√© et politique libanais soutenu par l'Iran. Il constitue une menace significative pour Isra√´l depuis sa fronti√®re nord. Le groupe poss√®de un arsenal important de missiles et de drones, et a √©t√© impliqu√© dans plusieurs conflits avec Isra√´l. Le soutien de l'Iran au Hezbollah est l'un des aspects cl√©s du conflit indirect entre l'Iran et Isra√´l.",
    
    "histoire": "Les tensions entre l'Iran et Isra√´l se sont intensifi√©es apr√®s la r√©volution islamique iranienne de 1979. Avant cette date, sous le r√®gne du Shah, l'Iran et Isra√´l entretenaient des relations relativement cordiales. Depuis, l'Iran a adopt√© une position hostile envers Isra√´l, le qualifiant de 'petit Satan' et appelant r√©guli√®rement √† sa destruction. Ce sont des rivalit√©s g√©opolitiques et id√©ologiques profondes qui structurent ce conflit.",
    
    "default": "Cette question touche √† un aspect important du conflit Isra√´l-Iran. Ce conflit implique des tensions historiques, religieuses et g√©opolitiques complexes. L'Iran ne reconna√Æt pas l'√âtat d'Isra√´l et soutient des groupes qui s'y opposent, tandis qu'Isra√´l consid√®re le programme nucl√©aire iranien et les proxys soutenus par l'Iran comme des menaces existentielles. Les tensions r√©centes incluent des √©changes d'accusations et parfois des attaques directes ou indirectes."
}

# Fonction pour g√©n√©rer une r√©ponse textuelle simple bas√©e sur des mots-cl√©s
def generate_simple_response(question):
    question_lower = question.lower()
    
    # V√©rifier si la question contient des mots-cl√©s connus
    for keyword, response in predefined_responses.items():
        if keyword in question_lower:
            return response
    
    # R√©ponse par d√©faut si aucun mot-cl√© n'est trouv√©
    return predefined_responses["default"]

# Fonction pour g√©n√©rer l'audio avec ElevenLabs
def generate_audio_response(text, voice_id, api_key):
    try:
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": api_key
        }
        
        data = {
            "text": text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.75,
                "style": 0.0,
                "use_speaker_boost": True
            }
        }
        
        response = requests.post(url, json=data, headers=headers)
        
        if response.status_code == 200:
            # Sauvegarder l'audio dans un fichier temporaire
            temp_path = tempfile.NamedTemporaryFile(delete=False, suffix='.mp3').name
            with open(temp_path, "wb") as f:
                f.write(response.content)
            
            return temp_path
        else:
            st.error(f"Erreur API ElevenLabs: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration audio: {str(e)}")
        return None

# Cr√©er une section principale
main_col1, main_col2 = st.columns([2, 1])

with main_col1:
    st.header("Lecteur de Podcast")
    
    if st.session_state.podcast_path:
        # Message pour l'utilisateur concernant la pause manuelle
        st.warning("‚ö†Ô∏è Veuillez mettre le podcast en pause manuellement avant de poser une question.")
        
        # Afficher le lecteur audio
        st.audio(st.session_state.podcast_path)
        
        # Afficher la r√©ponse audio si disponible
        if st.session_state.audio_response:
            st.subheader("R√©ponse de l'IA")
            st.audio(st.session_state.audio_response)
    else:
        st.info("Veuillez t√©l√©charger un podcast pour commencer.")

with main_col2:
    st.header("Poser une question")
    
    # Zone de texte pour saisir une question
    if st.session_state.podcast_path:
        # Saisie de la question par texte
        question = st.text_area("Tapez votre question ici :", height=100, 
                                placeholder="Exemple: Pourquoi l'Iran a attaqu√© Isra√´l?")
        
        if st.button("üîç Poser la question"):
            if question:
                st.success(f"Question pos√©e: {question}")
                
                # G√©n√©rer une r√©ponse simple bas√©e sur des mots-cl√©s
                answer_text = generate_simple_response(question)
                
                # V√©rifier que la cl√© API ElevenLabs est disponible
                if not elevenlabs_api_key:
                    st.error("Veuillez entrer votre cl√© API ElevenLabs pour g√©n√©rer la r√©ponse audio.")
                else:
                    # G√©n√©rer l'audio de la r√©ponse avec ElevenLabs
                    with st.spinner("G√©n√©ration de la r√©ponse audio..."):
                        audio_path = generate_audio_response(answer_text, voice_id, elevenlabs_api_key)
                        if audio_path:
                            st.session_state.audio_response = audio_path
                
                # Stocker la question et la r√©ponse
                st.session_state.questions_answers.append({
                    "question": question,
                    "answer": answer_text,
                    "audio_path": st.session_state.audio_response
                })
                
                # Afficher la r√©ponse
                st.success("R√©ponse obtenue!")
                st.info(answer_text)
                
                # Forcer le rafra√Æchissement pour afficher l'audio
                st.rerun()
            else:
                st.warning("Veuillez entrer une question.")
        
        # Afficher l'historique des questions et r√©ponses
        if st.session_state.questions_answers:
            st.subheader("Historique des questions")
            for i, qa in enumerate(st.session_state.questions_answers):
                with st.expander(f"Q{i+1}: {qa['question'][:50]}..."):
                    st.write(f"**Question:** {qa['question']}")
                    st.write(f"**R√©ponse:** {qa['answer']}")
                    if "audio_path" in qa and qa["audio_path"]:
                        st.audio(qa["audio_path"])

# Pied de page
st.markdown("---")
st.markdown("Podcast Interactif avec IA - Version MVP")
st.markdown("D√©velopp√© avec Streamlit et ElevenLabs")

# Nettoyage des fichiers temporaires √† la fermeture de l'application
def cleanup():
    if st.session_state.podcast_path and os.path.exists(st.session_state.podcast_path):
        try:
            os.unlink(st.session_state.podcast_path)
        except:
            pass
    
    # Nettoyer les fichiers audio temporaires
    for qa in st.session_state.questions_answers:
        if "audio_path" in qa and qa["audio_path"] and os.path.exists(qa["audio_path"]):
            try:
                os.unlink(qa["audio_path"])
            except:
                pass

# Enregistrer la fonction de nettoyage pour qu'elle s'ex√©cute √† la fermeture
import atexit
atexit.register(cleanup)
